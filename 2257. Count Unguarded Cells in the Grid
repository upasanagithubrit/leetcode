class Solution {
public:
void fill(int row,int col,vector<vector<int>>& grid,int m,int n)
{
    //up
    for(int i=row-1;i>=0;i--)
{
    if(grid[i][col]==3 ||grid[i][col]==2)
       break;

    grid[i][col]=1;   
}

//down
for(int i=row+1;i<m;i++)
{
     if(grid[i][col]==3 ||grid[i][col]==2)
       break;

    grid[i][col]=1; 
}

//left
for(int i=col-1;i>=0;i--)
{
     if(grid[row][i]==3 ||grid[row][i]==2)
       break;

    grid[row][i]=1; 
}

//right
for(int i=col+1;i<n;i++)
{
     if(grid[row][i]==3 ||grid[row][i]==2)
       break;

    grid[row][i]=1; 
}

}
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        vector<vector<int>>grid(m,vector<int>(n,0));
        for(vector<int>v:guards)
        {
            int i=v[0];
            int j=v[1];
            grid[i][j]=2;
        }
        for(vector<int>&v:walls)
        {
            int i=v[0];
            int j=v[1];
            grid[i][j]=3;
        }
        for(vector<int>&v:guards)
        {
            int i=v[0];
            int j=v[1];
            fill(i,j,grid,m,n);
        }
        int c=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==0) c++;
            }
        }
        return c;
    }
};
